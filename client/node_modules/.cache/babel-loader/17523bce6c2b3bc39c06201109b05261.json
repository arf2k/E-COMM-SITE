{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/alexforeman/PracticeCoding/React/ecomm-proj/ecomm-site/src/App.js\";\nimport \"./App.css\";\nimport React from \"react\";\nimport Homepage from \"./pages/homepage/Homepage.js\";\nimport \"./components/menu-item/MenuItem\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Shop from \"./pages/shop/Shop.js\";\nimport Header from \"./components/header/Header.js\";\nimport SignInSignUp from \"./pages/sign-in-sign-up/SignInSignUp.js\";\nimport { auth, createUserProfileDocument } from \"./firebase/Firebase.utils.js\";\nimport { connect } from 'react-redux';\nimport { setCurrentUser } from \"./redux/user/userActions.js\";\nimport { selectCurrentUser } from \"./redux/user/userSelector.js\";\nimport { createStructuredSelector } from 'reselect';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribefromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n          console.log(setCurrentUser);\n        });\n      } else {\n        setCurrentUser(userAuth);\n      }\n    });\n  } // open subscription between app & firebase app- when changes occur on firebase related to this app firebase sends message saying user changed - they'll give us this user so we dont have to manually check if state has changed as long as app component is mounted - also have to close subscritpions when it unmounts so no memory leaks\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: Homepage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          component: Shop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signin\",\n          render: () => this.props.currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(SignInSignUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Homepage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = ({\n  user\n}) => ({\n  currentUser: user.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/alexforeman/PracticeCoding/React/ecomm-proj/ecomm-site/src/App.js"],"names":["React","Homepage","Switch","Route","Redirect","Shop","Header","SignInSignUp","auth","createUserProfileDocument","connect","setCurrentUser","selectCurrentUser","createStructuredSelector","App","Component","unsubscribefromAuth","componentDidMount","props","unsubscribeFromAuth","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","console","log","componentWillUnmount","render","currentUser","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAO,iCAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,SAASC,IAAT,EAAeC,yBAAf,QAAgD,8BAAhD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAAQC,wBAAR,QAAuC,UAAvC;;AAEA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAGhCC,mBAHgC,GAGV,IAHU;AAAA;;AAKhCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAACN,MAAAA;AAAD,QAAmB,KAAKO,KAA9B;AACA,SAAKC,mBAAL,GAA2BX,IAAI,CAACY,kBAAL,CAAwB,MAAOC,QAAP,IAAoB;AACrE,UAAIA,QAAJ,EAAc;AACZ,cAAMC,OAAO,GAAG,MAAMb,yBAAyB,CAACY,QAAD,CAA/C;AAEAC,QAAAA,OAAO,CAACC,UAAR,CAAoBC,QAAD,IAAc;AAChCb,UAAAA,cAAc,CAAC;AACVc,YAAAA,EAAE,EAAED,QAAQ,CAACC,EADH;AAEV,eAAGD,QAAQ,CAACE,IAAT;AAFO,WAAD,CAAd;AAICC,UAAAA,OAAO,CAACC,GAAR,CAAYjB,cAAZ;AACD,SAND;AAOD,OAVD,MAUO;AACLA,QAAAA,cAAc,CAACU,QAAD,CAAd;AACD;AACF,KAd0B,CAA3B;AAeD,GAtB+B,CAuBhC;;;AAEAQ,EAAAA,oBAAoB,GAAG;AACrB,SAAKV,mBAAL;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,GAAlB;AAAsB,UAAA,SAAS,EAAE7B;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAEI;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAC,SAAlB;AAA4B,UAAA,MAAM,EAAE,MAAM,KAAKa,KAAL,CAAWa,WAAX,gBACxC,QAAC,QAAD;AAAU,YAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBADwC,gBAE1C,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAME,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA3C+B;;AA+ClC,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAe;AACrCF,EAAAA,WAAW,EAAEE,IAAI,CAACF;AADmB,CAAf,CAAxB;;AAKA,MAAMG,kBAAkB,GAAGC,QAAQ,KAAK;AACtCxB,EAAAA,cAAc,EAAEsB,IAAI,IAAIE,QAAQ,CAACxB,cAAc,CAACsB,IAAD,CAAf;AADM,CAAL,CAAnC;;AAKA,eAAevB,OAAO,CAACsB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CpB,GAA7C,CAAf","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport Homepage from \"./pages/homepage/Homepage.js\";\nimport \"./components/menu-item/MenuItem\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Shop from \"./pages/shop/Shop.js\";\nimport Header from \"./components/header/Header.js\";\nimport SignInSignUp from \"./pages/sign-in-sign-up/SignInSignUp.js\";\nimport { auth, createUserProfileDocument } from \"./firebase/Firebase.utils.js\";\nimport { connect } from 'react-redux';\nimport { setCurrentUser } from \"./redux/user/userActions.js\"\nimport { selectCurrentUser } from \"./redux/user/userSelector.js\";\nimport {createStructuredSelector} from 'reselect'\n\nclass App extends React.Component {\n\n\n  unsubscribefromAuth = null;\n\n  componentDidMount() {\n    const {setCurrentUser} = this.props \n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n        \n        userRef.onSnapshot((snapShot) => {\n         setCurrentUser({\n              id: snapShot.id,\n              ...snapShot.data(),\n          });\n          console.log(setCurrentUser)\n        });\n      } else {\n        setCurrentUser(userAuth);\n      }\n    });\n  }\n  // open subscription between app & firebase app- when changes occur on firebase related to this app firebase sends message saying user changed - they'll give us this user so we dont have to manually check if state has changed as long as app component is mounted - also have to close subscritpions when it unmounts so no memory leaks\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header/>\n        <Switch>\n          <Route exact path=\"/\" component={Homepage} />\n          <Route path=\"/shop\" component={Shop} />\n          <Route exact path=\"/signin\" render={() => this.props.currentUser? (\n            <Redirect to=\"/\" /> ) : (\n          <SignInSignUp/>)} />\n          <Homepage />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = ({ user }) => ({\n  currentUser: user.currentUser\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}